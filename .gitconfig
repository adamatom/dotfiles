[user]
    email = adam.labbe@generac.com
    name = Adam Labbe

[push]
    default = simple

[diff]
    tool = meld

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[core]
    excludesfile = ~/.gitignore_global

[merge]
    tool = meld
[mergetool "meld"]
    # Choose one of these 2 lines. Merged shows partially merged so far.
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    # BASE shows the root base before any auto-merges
    # cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"

[alias]
    # Print a useful graph, can pass additional git log commands: git lg -n 50 master..
    lg = "log --graph --abbrev-commit --decorate --all --date=format:%m-%d-%Y \
            --format=format:'%C(yellow)%h%C(bold blue)%d %C(reset)%<|(110,trunc)%s %C(white)%ad [%an]'"
    # Run `git delcheck` on a checked out branch to see if the branch has any novel commits
    delcheck = log --graph --left-right --cherry-pick --oneline master...

    # Do the dance of checking out master and deleting the recently-merged branch
    # Run on a checked out branch that has been pulled into the main branch.
    closeout = !delbranch=$(git rev-parse --abbrev-ref HEAD) && git fetch -Ppat && git checkout master && git rebase && git branch -d ${delbranch}

    # Show local branches whose upstream branch has been removed. Good for finding merged branches.
    gone = ! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}'

    # Update the submodules
    mods = submodule update --init --recursive

[rerere]
    enabled = 1
[rebase]
    instructionFormat = %an %s
[pull]
    rebase = true
[color]
    ui = true
[pager]
    tag = false
[tag]
    sort = version:refname
