[user]
    email = adam.labbe@generac.com
    name = Adam Labbe

[push]
    default = simple

[diff]
    tool = meld

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[core]
    excludesfile = ~/.gitignore_global

[merge]
    tool = meld

[mergetool "meld"]
    # Choose one of these 2 lines. Merged shows partially merged so far.
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    # BASE shows the root base before any auto-merges
    # cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"

[alias]
    # This are helper functions to figuring out the proper escaped-character string that these
    # aliases want to see. Usage is run `git quote-string` and then paste in your raw alias string,
    # and it will print out what you need to use for these alias strings.
    quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
    quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"

    # Shortcut to edit this file
    conf = config --global -e

    # Get the default branch name. Lets stop assuming it is 'master'
    getdefault = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'

    # Update the current branch to what it is tracking
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Find all branches that have been merged into default (or given) branch and try to delete them
    delmerged = "!f() { DEFAULT=$(git getdefault); git branch --merged ${1-$DEFAULT} | \
        grep -v \" ${1-$DEFAULT}$\" | xargs git branch -d; }; f"

    # Ppretty prints for the reflog
    rflg = "reflog --abbrev-commit --decorate --all --date=format:%m-%d-%Y \
            --format=format:'%C(yellow)%h%C(bold blue)%d %C(reset)%<|(110,trunc)%s %C(white)%ad [%an]'"

    # Run `git delcheck` on a checked out branch to see if the branch has any novel commits
    delcheck = log --graph --left-right --cherry-pick --oneline master...

    # Do the dance of checking out master and deleting the recently-merged branch
    closeout = "!f() { DEFAULT=$(git getdefault); git switch ${1-$DEFAULT} && git up && git delmerged ${1-$DEFAULT}; }; f"

    # Show local branches whose upstream branch has been removed. Good for finding merged branches.
    gone = ! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}'

    # Update the submodules
    mods = submodule update --init --recursive

    # Implements an interactive log. Can be passed any commands that git log accepts.
    # This implementation was based on examples from
    # https://gist.github.com/junegunn/f4fca918e937e6bf5bad
    lg="!lg() { \
        git log --graph --color=always --abbrev-commit --format=\"$(git lg-format)\" $@ |\
        fzf --no-mouse --ansi --no-sort --reverse --tiebreak=index --preview \"$(git fzf-preview)\" \
        --bind \"$(git fzf-binds)\" --preview-window=right:60% --height 80%; \
    }; lg"

    lg-format="!echo \"%C(auto)%h %C(blue)%d %C(reset)%s %C(yellow)%cr %C(white)%an\" #"

    # A helper function for git lg that echos out the fzf key bindings setting string
    fzf-binds="!echo \"\
j:down,\
k:up,\
ctrl-e:preview-down,\
ctrl-y:preview-up,\
ctrl-d:preview-page-down,\
ctrl-u:preview-page-up,\
q:abort,\
ctrl-m:execute: (grep -o '[a-f0-9]\\{7\\}' | head -1 | \
  xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF' {} FZF-EOF\" \
# end echo"

    # A helper function for git lg that echos out the preview command string for fzf. FZF passes
    # the raw git log line. This captures the 7 digit hash and stores it into $1 via the set
    # built-in.  Also, if no hash was recovered, don't show anything in the preview window.
    fzf-preview="!echo \"f() { \
                set -- \\$(echo -- \\$@ | grep -o \\\"[a-f0-9]\\{7\\}\\\"); \
                [ \\$# -eq 0 ] || git show --color=always \\$1 \
            }; f {} \" # end echo"

[rerere]
    enabled = 1
[rebase]
    instructionFormat = %an %s
[pull]
    rebase = true
[color]
    ui = true
[pager]
    tag = false
[tag]
    sort = version:refname
