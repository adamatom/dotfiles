scriptencoding utf-8
" run plugged
call plug#begin('~/.vim/plugged')

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins that change or add functionality
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"fancypants status line
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'purify',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename', 'modified', 'readonly' ] ],
    \   'right': [ [ 'gutentags'],
    \              [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component': {
    \   'readonly': "%{&readonly?'ðŸ”’':''}",
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightlineFugitive',
    \   'filename': 'LightlineFilename',
    \   'gutentags': 'gutentags#statusline'
    \ },
    \ }

function! IsQFLLFocused()
    silent! exec 'redir @a | ls | redir END'
    if match(@a,'%a-  "\[Location List\]"') >= 0
        return 1
    elseif match(@a,'%a-  "\[Quickfix List\]"') >= 0
        return 2
    else
        return 0
    endif
endfunction

function! LightlineFugitive()
    if &filetype !~? 'vimfiler' && exists('*fugitive#head')
        return fugitive#head()
    endif
    return ''
endfunction

function! LightlineFilename()
    let l:is_special_focused = IsQFLLFocused()
    if l:is_special_focused == 1
        return '[Local/Location List]'
    elseif l:is_special_focused == 2
        return '[Global/QuickFix]'
    endif

    let l:short_filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let l:med_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'
    let l:full_filename = expand('%:t') !=# '' ? fnamemodify(expand('%:p'), ':~:.') : '[No Name]'
    let l:max_len = 120
    let l:full_len = len(l:full_filename)
    let l:med_len = len(l:med_filename)

    let l:use_short = l:full_len > l:max_len && l:med_len > l:max_len
    let l:use_med = l:full_len > l:max_len && l:med_len <= l:max_len

    return l:use_short ? l:short_filename : l:use_med ? l:med_filename : l:full_filename
endfunction


"visual undo tree. nice for when you need to go back to a branch
Plug 'sjl/gundo.vim'
if has('python3')
    let g:gundo_prefer_python3 = 1
endif
nnoremap <silent> <leader>Wg :GundoToggle<CR>

"provides hg/git change status in the left gutter
Plug 'mhinz/vim-signify'


"vim front end for ack, with support for ag backend
Plug 'mileszs/ack.vim'
if executable('rg')
    let g:ackprg = 'rg --vimgrep --no-heading'
endif


"better buffer management
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
"let g:fzf_layout = { 'window': 'enew' }
" disable the preview window
let g:fzf_preview_window =''
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden'
nnoremap <silent> <leader>be :Buffers<CR>
nnoremap <silent> <C-p> :Files<CR>


"display marks
Plug 'kshenoy/vim-signature'


"Alternative to netrw, which is slow and buggy
Plug 'jeetsukumaran/vim-filebeagle'
let g:filebeagle_show_hidden=1


"Git wrapper for doing git things on files in vim
Plug 'tpope/vim-fugitive'
command! Greview :Git! diff --staged
"leader-b will toggle git blame
nmap <expr> <leader>b &filetype ==# 'fugitiveblame' ? "gq" : ":Git blame\r"

augroup fugitivecleanup
  autocmd!
  "Cleanup fugitive buffers automatically
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" Show commit message in fugitive blame window
Plug 'tommcdo/vim-fugitive-blame-ext'

"Blink the hlsearch item we just jumped to
Plug 'ivyl/vim-bling'
" This must be set to no, otherwise this breaks cabbrev working on <cr>
let g:bling_no_expr = 1

"Show the diff when editing a git commit.
Plug 'rhysd/committia.vim'

"Expands motion keys for faster jumps
Plug 'easymotion/vim-easymotion'

let g:EasyMotion_do_mapping = 0 " Disable default mappings
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" :Graphviz! png
Plug 'liuchengxu/graphviz.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" linting
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --all' }
let g:ycm_confirm_extra_conf = 0
let g:ycm_auto_hover = ''
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_min_num_identifier_candidate_chars = 99  " Disable identifier-based completion

let g:ycm_key_invoke_completion = '<C-Space>'  " Invoke semantic completion with ctrl-space

" YouCompleteMe and UltiSnips compatibility.
let g:ycm_use_ultisnips_completer = 1
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]


let g:ycm_clangd_args = [ '--header-insertion=never' ]

let g:ycm_semantic_triggers =  {
  \   'c,cpp,objc': [ 're!\w{3}', '_' ],
  \ }
augroup MyYCMCustom
  autocmd!
  autocmd FileType c,cpp let b:ycm_hover = {
    \ 'command': 'GetDoc',
    \ 'syntax': &filetype
    \ }
augroup END
nmap <leader>d <plug>(YCMHover)
nnoremap <C-LeftMouse> <LeftMouse>:YcmCompleter GoTo<CR>
nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <leader>gd :YcmCompleter GoTo<CR>
nnoremap <leader><leader>d :YcmDiags<CR>


" Ctags auto update
Plug 'ludovicchabant/vim-gutentags'
if executable('rg')
  let g:gutentags_file_list_command = 'rg --files'
endif


"Adhere to linux coding style guidelines
Plug 'vivien/vim-linux-coding-style', {'for': 'c'}
let g:linuxsty_patterns = []


" LanguageTool-powered grammar checking
Plug 'rhysd/vim-grammarous'

" Default to checking comments only by default, and then add the exceptions
let g:grammarous#default_comments_only_filetypes = {
            \ '*': 1, 'help': 0, 'text': 0, 'markdown': 0,
            \ }

" Disable spell checking via LanguageTool
let g:grammarous#disabled_rules = {
    \ '*' : ['MORFOLOGIK_RULE_EN_US', 'WORD_CONTAINS_UNDERSCORE', 'EN_QOUTES'],
    \ 'markdown' : [
    \       'MORFOLOGIK_RULE_EN_US',
    \       'WORD_CONTAINS_UNDERSCORE',
    \       'EN_QOUTES',
    \       'MULTIPLICATION_SIGN',
    \       'COMMA_PARENTHESIS_WHITESPACE',
    \       'WHITESPACE_RULE'],
    \ }

" Use the vim-spell dictionary
let g:grammarous#use_vim_spelllang = 1

" Show the grammar dialog immediately after checking
let g:grammarous#show_first_error = 1

let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs) abort
    nmap <buffer><leader>gi <Plug>(grammarous-open-info-window)
    nmap <buffer><leader>gI <Plug>(grammarous-close-info-window)
    nmap <buffer><leader>gd <Plug>(grammarous-remove-error)
    nmap <buffer><leader>g] <Plug>(grammarous-move-to-next-error)
    nmap <buffer><leader>g[ <Plug>(grammarous-move-to-previous-error)
endfunction

function! g:grammarous#hooks.on_reset(errs) abort
    nunmap <buffer><leader>gi
    nunmap <buffer><leader>gI
    nunmap <buffer><leader>gd
    nunmap <buffer><leader>g[
    nunmap <buffer><leader>g]
endfunction

nnoremap <leader>gc :GrammarousCheck<cr>


" Linters for everything
Plug 'dense-analysis/ale'
let g:ale_linters = { 
  \ 'c': [],
  \ 'cpp': [],
  \ 'markdown': ['mdl', 'languagetool'],
  \ }

" ALE linting events
augroup ale
  autocmd!

  autocmd VimEnter * set updatetime=1000 | let g:ale_lint_on_text_changed = 0
  autocmd CursorHold * call ale#Queue(0)
  autocmd CursorHoldI * call ale#Queue(0)
  autocmd InsertEnter * call ale#Queue(0)
  autocmd InsertLeave * call ale#Queue(0)
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plugins that add keyboard commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"replace {motion} with a register. Faster than typing '"_c[motion]^r"'
Plug 'vim-scripts/ReplaceWithRegister'


"repeated v's expand cut the visually selected region
Plug 'terryma/vim-expand-region'
vnoremap v <Plug>(expand_region_expand)
vnoremap <S-v> <Plug>(expand_region_shrink)


"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extra language support, such as syntax highlighting, repl interaction
"""""""""""""""""""""""""""""""""""""""""""""""""""""
"Sort python includes with isort
Plug 'fisadev/vim-isort', {'for': 'python'}
let g:vim_isort_python_version = 'python3'


"graphviz support
Plug 'wannesm/wmgraphviz.vim', {'for': 'dot'}


"Linux kernel/Buildroot Kconfig syntax
Plug 'chrisbra/vim-kconfig', {'for': 'kconfig'}


"Syntax, indent, ftplugin for a bunch of languages
Plug 'sheerun/vim-polyglot'


" Extra highlighting for c/c++
Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['c', 'cpp']}


"Syntax highlighting for pic assembly
Plug 'veegee/vim-pic', {'for': 'asm'}


"Support for viewing markdown rendering
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

"Don't automatically close the preview window when I look at another buffer
let g:mkdp_auto_close = 0

function! g:Open_browser(url)
    silent exe 'silent !firefox -P default -url ' . a:url . ' &'
endfunction

"Define our own function for launching the background browser
let g:mkdp_browserfunc = 'g:Open_browser'

nmap <leader>m <Plug>MarkdownPreviewToggle

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" color schemes
"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/base16-vim'
Plug 'connorholyday/vim-snazzy'
Plug 'dracula/vim'
Plug 'jacoborus/tender.vim'
Plug 'joshdick/onedark.vim'
Plug 'liuchengxu/space-vim-theme'
Plug 'marcopaganini/termschool-vim-theme'
Plug 'mhartington/oceanic-next'
Plug 'mkarmona/materialbox'
Plug 'morhetz/gruvbox'
Plug 'nightsense/carbonized'
Plug 'rakr/vim-one'
Plug 'ayu-theme/ayu-vim'
Plug 'arzg/vim-corvine'
Plug 'KeitaNakamura/neodark.vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'balanceiskey/vim-framer-syntax'
Plug 'tpope/vim-vividchalk'
Plug 'kyoz/purify', { 'rtp': 'vim' }
Plug 'sainnhe/edge'

call plug#end()

function! SetupEnvironment()
    " Alternative to this approach is running with exrc, though this has security implications.
    " This approach is the approach suggested by Braam, and it turns out it is nice to see all of
    " the project settings in one file.
    let l:path = expand('%:p')

    " Does path contain the kernel_modules
    if l:path =~# 'acadia/kernel_modules'
        let g:linuxsty_patterns = ['/home/adam/projects/idexx/acadia/kernel_modules/']
        " use `bear make` for autocompletion and syntax checks
        setlocal listchars=tab:\Â»\ ,trail:Â·,extends:â€¦
        setlocal noexpandtab
        setlocal tabstop=8
        setlocal shiftwidth=8
        setlocal textwidth=80
        setlocal colorcolumn=81
    elseif l:path =~# 'acadia/applications'
        let g:gutentags_ctags_exclude = ['node_modules']
        if &filetype ==? 'python'
            setlocal textwidth=100
            setlocal colorcolumn=101
        endif
        let g:python_auto_pipenv = 0
    else
        let g:linuxsty_patterns = []
    endif
endfunction

augroup envswitch
    " Clean up envswitch group
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter,BufReadPost,BufNewFile * call SetupEnvironment()
augroup END
